The ``1-my_list`` module
======================

doc-strings Check:

Module doc
         >>> doc = __import__("1-my_list").__doc__
         >>> len(doc) > 1
         True

Class doc
        >>> MyList = __import__("1-my_list").MyList
        >>> doc = MyList.__doc__
        >>> len(doc) > 1
        True

Method doc
	    >>> doc = MyList.print_sorted.__doc__
	    >>> len(doc) > 1
	    True

Check if its subclass of list:
	    >>> issubclass(MyList, list)
	    True

Tests if it has empty list:
	    >>> my_list = MyList()
	    >>> print(my_list)
	    []

Test appendng:
	    >>> my_list.append(1)
	    >>> my_list.append(2)
	    >>> my_list.append(3)
	    >>> my_list.append(4)
	    >>> print(my_list)
	    [1, 2, 3, 4]

Test pop:
	    >>> num = my_list.pop()
	    >>> print(num)
	    4

Method Test:
Test print_sorted for alredy sorted
	    >>> my_list.print_sorted()
	    [1, 2, 3]

Test for reversed order list:
	    >>> my_list = MyList()
	    >>> my_list.append(4)
	    >>> my_list.append(3)
	    >>> my_list.append(2)
	    >>> my_list.append(1)
	    >>> my_list.print_sorted()
	    [1, 2, 3, 4]
	    >>> print(my_list)
	    [4, 3, 2, 1]

Test with negative numbers:
	    >>> my_list.append(-1)
	    >>> my_list.append(5)
	    >>> print(my_list)
	    [4, 3, 2, 1, -1, 5]
	    >>> my_list.print_sorted()
	    [-1, 1, 2, 3, 4, 5]
	    >>> print(my_list)
	    [4, 3, 2, 1, -1, 5]


	    >>> my_list = MyList()
	    >>> my_list.append(-10)
	    >>> my_list.append(-1)
	    >>> my_list.append(-7)
	    >>> my_list.append(-2)
	    >>> my_list.append(-8)
	    >>> print(my_list)
	    [-10, -1, -7, -2, -8]
	    >>> my_list.print_sorted()
	    [-10, -8, -7, -2, -1]


Checking for too many arguments:
	  >>> my_list.print_sorted(1)
	  Traceback (most recent call last):
	  TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given