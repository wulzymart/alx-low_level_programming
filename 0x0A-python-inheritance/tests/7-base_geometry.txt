The ``7-base_geometry`` module
======================

Importing the function from the module:
	>>> BG = __import__("7-base_geometry").BaseGeometry

Test for Docstrings:
Module docstring
	>>> doc = __import__("7-base_geometry").__doc__
	>>> len(doc) > 1
	True

class docstring:
	>>> doc = __import__("7-base_geometry").BaseGeometry.__doc__
	>>> len(doc) > 1
	True

method docstring:
	>>> doc = __import__("7-base_geometry").BaseGeometry.area.__doc__
	>>> len(doc) > 1
	True
	>>> doc = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
	>>> len(doc) > 1
	True

Test area exception:
	>>> a = BG()
	>>> a.area()
	Traceback (most recent call last):
	Exception: area() is not implemented

Test too many arguments for area:
	>>> a.area(1)
	Traceback (most recent call last):
	TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given


Integer Validator tests:

	>>> a.integer_validator("integer", 1)

	>>> a.integer_validator("integer", 0)
	Traceback (most recent call last):
	ValueError: integer must be greater than 0


	>>> a.integer_validator("integer", -5)
	Traceback (most recent call last):
	ValueError: integer must be greater than 0

Test with other data types:
	>>> a.integer_validator("bool", True)
	Traceback (most recent call last):
	TypeError: bool must be an integer

	>>> a.integer_validator("float", 1.5)
	Traceback (most recent call last):
	TypeError: float must be an integer

	>>> a.integer_validator("tuple", (1, 1))
	Traceback (most recent call last):
	TypeError: tuple must be an integer

	>>> a.integer_validator("string", "hello")
	Traceback (most recent call last):
	TypeError: string must be an integer
	
	>>> a.integer_validator("list", [1, 2, 3])
	Traceback (most recent call last):
	TypeError: list must be an integer

	>>> a.integer_validator("dict", {"key": "value"})
	Traceback (most recent call last):
	TypeError: dict must be an integer

	>>> a.integer_validator("set", {"hello", "world"})
	Traceback (most recent call last):
	TypeError: set must be an integer

Test with invalid arguemnt numbers
no arguments to integer_validator:
	>>> a.integer_validator()
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

only 1 argument to integer_validator:
	>>> a.integer_validator("integer")
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

too many arguments:
	>>> a.integer_validator("integer", 1, 2)
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given